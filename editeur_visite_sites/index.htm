<!doctype html>
<html lang="fr">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Editeur — Visite de sites (John)</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"/>
  <style>
    html,body,#map{{height:100%;margin:0;padding:0}}
    #app{{display:flex;flex-direction:column;height:100vh}}
    #top{{padding:6px;background:#f0f0f0;display:flex;gap:6px;align-items:center}}
    #content{{display:flex;flex:1;gap:6px}}
    #map{{flex:1}}
    #panel{{width:360px;overflow:auto;padding:8px;background:#fff}}
    input,textarea,button{{width:100%;box-sizing:border-box;margin:4px 0}}
    .point{{border:1px solid #ddd;padding:6px;margin:6px 0}}
  </style>
</head>
<body>
<div id="app">
  <div id="top">
    <input id="siteTitle" placeholder="Titre du site (ex: Cirque de X)" />
    <button id="newPoint">Nouveau point</button>
    <button id="export">Exporter (.zip)</button>
    <span id="status" style="margin-left:8px"></span>
  </div>
  <div id="content">
    <div id="map"></div>
    <div id="panel">
      <div><strong>John — Editeur</strong></div>
      <div id="pointsList"></div>
    </div>
  </div>
</div>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exif-js/2.3.0/exif.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.7.1/jszip.min.js"></script>
<script>
// Minimal editor implementing required features
let map = L.map('map').setView([45,3], 6);
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {maxZoom: 19}).addTo(map);

let points = []; // {title, text, media: {name,type,dataURL}, audio: {name,dataURL}, lat, lng, marker}
const pointsList = document.getElementById('pointsList');
const status = document.getElementById('status');

function renderPoints(){
  pointsList.innerHTML='';
  points.forEach((p, idx)=>{
    const div = document.createElement('div'); div.className='point';
    div.innerHTML = `
      <input placeholder="Titre" value="${p.title||('Point '+(idx+1))}" data-idx="${idx}" class="pt-title"/>
      <textarea placeholder="Commentaire" data-idx="${idx}" class="pt-text">${p.text||''}</textarea>
      <div>Photo/Video: <input type="file" accept="image/*,video/*" data-idx="${idx}" class="pt-media"/></div>
      <div>Enregistrer audio (optionnel): <button data-idx="${idx}" class="rec-btn">Enregistrer</button> <span class="rec-status"></span></div>
      <div>Lat: <input class="pt-lat" value="${p.lat||''}" data-idx="${idx}"/> Lng: <input class="pt-lng" value="${p.lng||''}" data-idx="${idx}"/></div>
      <div><button data-idx="${idx}" class="del">Supprimer</button></div>
      `;
    pointsList.appendChild(div);

    // attach events
    div.querySelector('.pt-title').addEventListener('input', e=>{ points[e.target.dataset.idx].title = e.target.value; });
    div.querySelector('.pt-text').addEventListener('input', e=>{ points[e.target.dataset.idx].text = e.target.value; });
    div.querySelector('.pt-media').addEventListener('change', e=> handleMedia(e.target.files[0], e.target.dataset.idx));
    div.querySelector('.del').addEventListener('click', e=>{ removePoint(e.target.dataset.idx); });
    div.querySelector('.pt-lat').addEventListener('change', e=>updateLatLng(e.target.dataset.idx));
    div.querySelector('.pt-lng').addEventListener('change', e=>updateLatLng(e.target.dataset.idx));
    div.querySelector('.rec-btn').addEventListener('click', e=>toggleRecord(e.target.dataset.idx, div.querySelector('.rec-status')));
  });
}

function updateLatLng(idx){
  const container = pointsList.children[idx];
  const lat = parseFloat(container.querySelector('.pt-lat').value)||null;
  const lng = parseFloat(container.querySelector('.pt-lng').value)||null;
  points[idx].lat = lat; points[idx].lng = lng;
  if(points[idx].marker){ points[idx].marker.setLatLng([lat,lng]); }
}

function handleMedia(file, idx){
  if(!file) return;
  const reader = new FileReader();
  reader.onload = function(e){
    const dataURL = e.target.result;
    // attempt to read EXIF for images
    if(file.type.startsWith('image/')){
      try{
        EXIF.getData(file, function(){
          const lat = EXIF.getTag(this, "GPSLatitude");
          const lon = EXIF.getTag(this, "GPSLongitude");
          const latRef = EXIF.getTag(this, "GPSLatitudeRef") || 'N';
          const lonRef = EXIF.getTag(this, "GPSLongitudeRef") || 'E';
          if(lat && lon){
            function dmsToDec(dms, ref){
              const val = dms[0] + dms[1]/60 + dms[2]/3600;
              return (ref === 'S' || ref === 'W') ? -val : val;
            }
            const latitude = dmsToDec(lat, latRef);
            const longitude = dmsToDec(lon, lonRef);
            points[idx].lat = latitude; points[idx].lng = longitude;
            placeMarkerForPoint(idx);
            status.textContent = 'Géolocalisation EXIF détectée.';
          } else {
            status.textContent = 'Image sans géolocalisation EXIF — vous pouvez déplacer le marqueur.';
          }
        });
      } catch(e){
        console.warn('EXIF read error', e);
      }
    }
    points[idx].media = {name: file.name, type: file.type, dataURL};
    placeMarkerForPoint(idx);
    renderPoints();
  };
  reader.readAsDataURL(file);
}

function placeMarkerForPoint(idx){
  const p = points[idx];
  if(p.lat && p.lng){
    if(p.marker) p.marker.setLatLng([p.lat,p.lng]);
    else {
      p.marker = L.marker([p.lat,p.lng], {draggable:true}).addTo(map);
      p.marker.on('dragend', function(e){
        const latlng = e.target.getLatLng();
        p.lat = latlng.lat; p.lng = latlng.lng;
        renderPoints();
      });
    }
    map.panTo([p.lat,p.lng]);
  } else {
    if(!p.marker){
      p.marker = L.marker(map.getCenter(), {draggable:true}).addTo(map);
      p.marker.on('dragend', function(e){
        const latlng = e.target.getLatLng();
        p.lat = latlng.lat; p.lng = latlng.lng;
        renderPoints();
      });
    }
  }
}

function removePoint(idx){
  const p = points[idx];
  if(p.marker) map.removeLayer(p.marker);
  points.splice(idx,1);
  renderPoints();
}

// audio recording (uses MediaRecorder when available)
let mediaRecorder, audioChunks = {};
function toggleRecord(idx, statusEl){
  if(!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia){ alert('Enregistrement non supporté par ce navigateur'); return; }
  if(mediaRecorder && mediaRecorder.state==='recording'){ mediaRecorder.stop(); return; }
  navigator.mediaDevices.getUserMedia({audio:true}).then(stream=>{
    mediaRecorder = new MediaRecorder(stream);
    audioChunks[idx]=[];
    mediaRecorder.ondataavailable = e=> audioChunks[idx].push(e.data);
    mediaRecorder.onstop = ()=>{
      const blob = new Blob(audioChunks[idx], {type: 'audio/webm'});
      const reader = new FileReader();
      reader.onload = ()=>{ points[idx].audio = {name:'audio_'+Date.now()+'.webm', dataURL: reader.result}; renderPoints(); status.textContent='Audio enregistré.'; };
      reader.readAsDataURL(blob);
    };
    mediaRecorder.start();
    statusEl.textContent='Enregistrement... cliquez à nouveau pour arrêter.';
  }).catch(err=> alert('Erreur accès micro: '+err));
}

document.getElementById('newPoint').addEventListener('click', ()=>{
  const p = {title:'Point '+(points.length+1), text:'', lat:null, lng:null};
  points.push(p); renderPoints(); placeMarkerForPoint(points.length-1);
});

document.getElementById('export').addEventListener('click', async ()=>{
  const site = document.getElementById('siteTitle').value || 'SansNom';
  const zip = new JSZip();
  const proj = {title: site, points: []};
  for(let i=0;i<points.length;i++){
    const p = points[i];
    const out = {title: p.title||('Point '+(i+1)), text: p.text||'', lat:p.lat, lng:p.lng, media:null, audio:null};
    if(p.media){
      // save media into medias/
      const name = i + '_' + p.media.name;
      const data = p.media.dataURL.split(',')[1];
      zip.file('medias/'+name, data, {base64:true});
      out.media = {name: 'medias/'+name, type: p.media.type};
    }
    if(p.audio){
      const an = i + '_' + p.audio.name;
      const data = p.audio.dataURL.split(',')[1];
      zip.file('medias/'+an, data, {base64:true});
      out.audio = {name: 'medias/'+an};
    }
    proj.points.push(out);
  }
  zip.file('project.json', JSON.stringify(proj, null, 2));
  const content = await zip.generateAsync({type:'blob'});
  const a = document.createElement('a');
  a.href = URL.createObjectURL(content);
  a.download = 'Projet_'+site.replace(/\s+/g,'_')+'.zip';
  a.click();
});

// minimal service worker registration
if('serviceWorker' in navigator){
  navigator.serviceWorker.register('sw.js').catch(()=>{});
}
</script>
</body>
</html>
