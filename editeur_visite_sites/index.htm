<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Éditeur de visite</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <style>
    body { font-family: Arial, sans-serif; margin: 0; padding: 0; }
    header { background: #2c3e50; color: white; padding: 10px; text-align: center; }
    #map { height: 300px; margin: 10px; border: 1px solid #ccc; }
    .point { border: 1px solid #aaa; padding: 10px; margin: 10px; border-radius: 8px; }
    .media-preview img, .media-preview video, .media-preview audio { max-width: 100%; margin-top: 8px; border-radius: 6px; }
    button { padding: 6px 12px; margin: 4px; cursor: pointer; }
    .notice { color: red; font-weight: bold; margin-top: 5px; }
  </style>
</head>
<body>
<header>
  <h1>Éditeur de visite</h1>
  <label>Titre du site : <input type="text" id="siteTitle" placeholder="Nom du site" /></label>
</header>
<div id="pointsContainer"></div>
<button id="addPoint">Ajouter un point</button>
<button id="exportBtn">Exporter la visite</button>

<div id="map"></div>

<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script src="https://cdn.jsdelivr.net/npm/exif-js"></script>
<script src="https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/file-saver@2.0.5/dist/FileSaver.min.js"></script>
<script>
let siteTitle = "";
let points = [];
let markers = [];
const container = document.getElementById("pointsContainer");
const addBtn = document.getElementById("addPoint");
const exportBtn = document.getElementById("exportBtn");

const map = L.map('map').setView([44, 6], 8);
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution: '© OpenStreetMap',
  maxZoom: 19
}).addTo(map);

document.getElementById("siteTitle").addEventListener("input", (e) => {
  siteTitle = e.target.value;
});

function addMarker(idx, lat, lng, draggable=true) {
  if (markers[idx]) map.removeLayer(markers[idx]);
  const marker = L.marker([lat, lng], { draggable }).addTo(map);
  markers[idx] = marker;
  marker.on("dragend", function(e) {
    const pos = e.target.getLatLng();
    points[idx].lat = pos.lat;
    points[idx].lng = pos.lng;
    document.getElementById(`lat-${idx}`).innerText = pos.lat.toFixed(5);
    document.getElementById(`lng-${idx}`).innerText = pos.lng.toFixed(5);
  });
}

function renderPoints() {
  container.innerHTML = "";
  points.forEach((p, idx) => {
    const div = document.createElement("div");
    div.className = "point";
    div.innerHTML = `
      <h3>Point ${idx + 1}</h3>
      <label>Titre : <input type="text" value="${p.title}" onchange="updateTitle(${idx}, this.value)" /></label><br>
      <label>Commentaire : <textarea onchange="updateComment(${idx}, this.value)">${p.comment}</textarea></label><br>
      <label>Photo : <input type="file" accept="image/*" onchange="loadPhoto(${idx}, this.files[0])" /></label>
      <div class="media-preview" id="photo-preview-${idx}"></div>
      <label>Vidéo : <input type="file" accept="video/*" onchange="loadVideo(${idx}, this.files[0])" /></label>
      <div class="media-preview" id="video-preview-${idx}"></div>
      <label>Son : <input type="file" accept="audio/*" onchange="loadAudio(${idx}, this.files[0])" /></label>
      <div class="media-preview" id="audio-preview-${idx}"></div>
      <p>Latitude : <span id="lat-${idx}">${p.lat || "?"}</span> | Longitude : <span id="lng-${idx}">${p.lng || "?"}</span></p>
      <div id="notice-${idx}" class="notice"></div>
      <button onclick="deletePoint(${idx})">Supprimer ce point</button>
    `;
    container.appendChild(div);
    if (p.photo) document.getElementById(`photo-preview-${idx}`).innerHTML = `<img src="${p.photo}" alt="aperçu photo" />`;
    if (p.video) document.getElementById(`video-preview-${idx}`).innerHTML = `<video controls><source src="${p.video}" type="${p.videoType}"></video>`;
    if (p.audio) document.getElementById(`audio-preview-${idx}`).innerHTML = `<audio controls><source src="${p.audio}" type="${p.audioType}"></audio>`;
  });
}

window.updateTitle = (idx, val) => points[idx].title = val;
window.updateComment = (idx, val) => points[idx].comment = val;

function processEXIF(idx, file) {
  EXIF.getData(file, function() {
    const lat = EXIF.getTag(this, "GPSLatitude");
    const lon = EXIF.getTag(this, "GPSLongitude");
    const latRef = EXIF.getTag(this, "GPSLatitudeRef") || "N";
    const lonRef = EXIF.getTag(this, "GPSLongitudeRef") || "E";
    if (lat && lon) {
      const latDeg = lat[0] + lat[1]/60 + lat[2]/3600;
      const lonDeg = lon[0] + lon[1]/60 + lon[2]/3600;
      points[idx].lat = latRef === "S" ? -latDeg : latDeg;
      points[idx].lng = lonRef === "W" ? -lonDeg : lonDeg;
      document.getElementById(`lat-${idx}`).innerText = points[idx].lat.toFixed(5);
      document.getElementById(`lng-${idx}`).innerText = points[idx].lng.toFixed(5);
      addMarker(idx, points[idx].lat, points[idx].lng, true);
    } else {
      document.getElementById(`notice-${idx}`).innerText = "Pas de géolocalisation : déplacez le marqueur.";
      points[idx].lat = map.getCenter().lat;
      points[idx].lng = map.getCenter().lng;
      document.getElementById(`lat-${idx}`).innerText = points[idx].lat.toFixed(5);
      document.getElementById(`lng-${idx}`).innerText = points[idx].lng.toFixed(5);
      addMarker(idx, points[idx].lat, points[idx].lng, true);
    }
  });
}

window.loadPhoto = (idx, file) => {
  const reader = new FileReader();
  reader.onload = e => {
    points[idx].photo = e.target.result;
    points[idx].photoType = file.type;
    processEXIF(idx, file);
    renderPoints();
  };
  reader.readAsDataURL(file);
};

window.loadVideo = (idx, file) => {
  const reader = new FileReader();
  reader.onload = e => {
    points[idx].video = e.target.result;
    points[idx].videoType = file.type;
    renderPoints();
  };
  reader.readAsDataURL(file);
};

window.loadAudio = (idx, file) => {
  const reader = new FileReader();
  reader.onload = e => {
    points[idx].audio = e.target.result;
    points[idx].audioType = file.type;
    renderPoints();
  };
  reader.readAsDataURL(file);
};

function deletePoint(idx) {
  points.splice(idx, 1);
  if (markers[idx]) map.removeLayer(markers[idx]);
  markers.splice(idx, 1);
  renderPoints();
}

addBtn.addEventListener("click", () => {
  points.push({ title: "", comment: "", photo: null, photoType: null, video: null, videoType: null, audio: null, audioType: null, lat: null, lng: null });
  renderPoints();
});

exportBtn.addEventListener("click", async () => {
  if (!siteTitle) {
    alert("Veuillez saisir un titre pour le site.");
    return;
  }
  const zip = new JSZip();
  zip.file("project.json", JSON.stringify({ siteTitle, points }));
  const mediasFolder = zip.folder("medias");
  points.forEach((p, idx) => {
    if (p.photo) mediasFolder.file(`photo_${idx}.jpg`, p.photo.split(",")[1], {base64: true});
    if (p.video) mediasFolder.file(`video_${idx}.mp4`, p.video.split(",")[1], {base64: true});
    if (p.audio) mediasFolder.file(`audio_${idx}.mp3`, p.audio.split(",")[1], {base64: true});
  });
  const blob = await zip.generateAsync({type:"blob"});
  saveAs(blob, "Projet_" + siteTitle + ".zip");
});
</script>
</body>
</html>
